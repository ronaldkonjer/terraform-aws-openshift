{
    "version": 3,
    "terraform_version": "0.11.3",
    "serial": 5,
    "lineage": "719020a3-727e-4825-b9b5-b772626b5033",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {
                "bastion-public_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ec2-52-50-233-119.eu-west-1.compute.amazonaws.com"
                },
                "bastion-public_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "52.50.233.119"
                },
                "master-public_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ec2-34-241-4-117.eu-west-1.compute.amazonaws.com"
                },
                "master-public_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "34.241.4.117"
                },
                "master-url": {
                    "sensitive": false,
                    "type": "string",
                    "value": "https://34.241.4.117.xip.io:8443"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "openshift"
            ],
            "outputs": {
                "bastion-private_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ip-172-24-28-100.eu-west-1.compute.internal"
                },
                "bastion-private_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "172.24.28.100"
                },
                "bastion-public_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ec2-52-50-233-119.eu-west-1.compute.amazonaws.com"
                },
                "bastion-public_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "52.50.233.119"
                },
                "master-private_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ip-172-24-28-83.eu-west-1.compute.internal"
                },
                "master-private_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "172.24.28.83"
                },
                "master-public_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ec2-34-241-4-117.eu-west-1.compute.amazonaws.com"
                },
                "master-public_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "34.241.4.117"
                },
                "node1-private_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ip-172-24-28-250.eu-west-1.compute.internal"
                },
                "node1-private_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "172.24.28.250"
                },
                "node1-public_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ec2-54-154-222-45.eu-west-1.compute.amazonaws.com"
                },
                "node1-public_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "54.154.222.45"
                },
                "node2-private_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ip-172-24-28-201.eu-west-1.compute.internal"
                },
                "node2-private_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "172.24.28.201"
                },
                "node2-public_dns": {
                    "sensitive": false,
                    "type": "string",
                    "value": "ec2-34-243-210-123.eu-west-1.compute.amazonaws.com"
                },
                "node2-public_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "34.243.210.123"
                }
            },
            "resources": {
                "aws_iam_access_key.openshift-aws-user": {
                    "type": "aws_iam_access_key",
                    "depends_on": [
                        "aws_iam_user.openshift-aws-user"
                    ],
                    "primary": {
                        "id": "AKIAJMOIFW5N7PCM2OYQ",
                        "attributes": {
                            "id": "AKIAJMOIFW5N7PCM2OYQ",
                            "secret": "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",
                            "ses_smtp_password": "Aoo+nUBUzwN/vovUCWBfHcdhM7cROU+vLago7sRTaguh",
                            "status": "Active",
                            "user": "openshift-aws-user"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_instance_profile.bastion-instance-profile": {
                    "type": "aws_iam_instance_profile",
                    "depends_on": [
                        "aws_iam_role.openshift-instance-role"
                    ],
                    "primary": {
                        "id": "bastion-instance-profile",
                        "attributes": {
                            "arn": "arn:aws:iam::807891339983:instance-profile/bastion-instance-profile",
                            "id": "bastion-instance-profile",
                            "name": "bastion-instance-profile",
                            "path": "/",
                            "role": "openshift-instance-role",
                            "roles.#": "0",
                            "unique_id": "AIPAIDQLBWX3IQDGM62XA"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_instance_profile.openshift-instance-profile": {
                    "type": "aws_iam_instance_profile",
                    "depends_on": [
                        "aws_iam_role.openshift-instance-role"
                    ],
                    "primary": {
                        "id": "openshift-instance-profile",
                        "attributes": {
                            "arn": "arn:aws:iam::807891339983:instance-profile/openshift-instance-profile",
                            "id": "openshift-instance-profile",
                            "name": "openshift-instance-profile",
                            "path": "/",
                            "role": "openshift-instance-role",
                            "roles.#": "0",
                            "unique_id": "AIPAJICS2RGWXIN66PR5Q"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_policy.openshift-policy-forward-logs": {
                    "type": "aws_iam_policy",
                    "depends_on": [],
                    "primary": {
                        "id": "arn:aws:iam::807891339983:policy/openshift-instance-forward-logs",
                        "attributes": {
                            "arn": "arn:aws:iam::807891339983:policy/openshift-instance-forward-logs",
                            "description": "Allows an instance to forward logs to CloudWatch",
                            "id": "arn:aws:iam::807891339983:policy/openshift-instance-forward-logs",
                            "name": "openshift-instance-forward-logs",
                            "path": "/",
                            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogStreams\"\n      ],\n      \"Resource\": [\n        \"arn:aws:logs:*:*:*\"\n      ]\n    }\n  ]\n}\n"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_policy_attachment.openshift-attachment-forward-logs": {
                    "type": "aws_iam_policy_attachment",
                    "depends_on": [
                        "aws_iam_policy.openshift-policy-forward-logs",
                        "aws_iam_role.openshift-instance-role"
                    ],
                    "primary": {
                        "id": "openshift-attachment-forward-logs",
                        "attributes": {
                            "groups.#": "0",
                            "id": "openshift-attachment-forward-logs",
                            "name": "openshift-attachment-forward-logs",
                            "policy_arn": "arn:aws:iam::807891339983:policy/openshift-instance-forward-logs",
                            "roles.#": "1",
                            "roles.1717939172": "openshift-instance-role",
                            "users.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_role.openshift-instance-role": {
                    "type": "aws_iam_role",
                    "depends_on": [],
                    "primary": {
                        "id": "openshift-instance-role",
                        "attributes": {
                            "arn": "arn:aws:iam::807891339983:role/openshift-instance-role",
                            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
                            "create_date": "2018-03-19T07:23:50Z",
                            "force_detach_policies": "false",
                            "id": "openshift-instance-role",
                            "name": "openshift-instance-role",
                            "path": "/",
                            "unique_id": "AROAIUA2OHAENYQANDAVC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_user.openshift-aws-user": {
                    "type": "aws_iam_user",
                    "depends_on": [],
                    "primary": {
                        "id": "openshift-aws-user",
                        "attributes": {
                            "arn": "arn:aws:iam::807891339983:user/openshift-aws-user",
                            "force_destroy": "false",
                            "id": "openshift-aws-user",
                            "name": "openshift-aws-user",
                            "path": "/",
                            "unique_id": "AIDAIMRWU6DBRT4R37ONK"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_user_policy.openshift-aws-user": {
                    "type": "aws_iam_user_policy",
                    "depends_on": [
                        "aws_iam_user.openshift-aws-user"
                    ],
                    "primary": {
                        "id": "openshift-aws-user:openshift-aws-user-policy",
                        "attributes": {
                            "id": "openshift-aws-user:openshift-aws-user-policy",
                            "name": "openshift-aws-user-policy",
                            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeVolume*\",\n        \"ec2:CreateVolume\",\n        \"ec2:CreateTags\",\n        \"ec2:DescribeInstance*\",\n        \"ec2:AttachVolume\",\n        \"ec2:DetachVolume\",\n        \"ec2:DeleteVolume\",\n        \"ec2:DescribeSubnets\",\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:DescribeSecurityGroups\",\n        \"elasticloadbalancing:DescribeTags\",\n        \"elasticloadbalancing:CreateLoadBalancerListeners\",\n        \"ec2:DescribeRouteTables\",\n        \"elasticloadbalancing:ConfigureHealthCheck\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"elasticloadbalancing:DeleteLoadBalancerListeners\",\n        \"elasticloadbalancing:RegisterInstancesWithLoadBalancer\",\n        \"elasticloadbalancing:DescribeLoadBalancers\",\n        \"elasticloadbalancing:CreateLoadBalancer\",\n        \"elasticloadbalancing:DeleteLoadBalancer\",\n        \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\n        \"elasticloadbalancing:DescribeLoadBalancerAttributes\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n",
                            "user": "openshift-aws-user"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_instance.bastion": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_iam_instance_profile.bastion-instance-profile",
                        "aws_key_pair.keypair",
                        "aws_security_group.openshift-public-egress",
                        "aws_security_group.openshift-ssh",
                        "aws_security_group.openshift-vpc",
                        "aws_subnet.public-subnet",
                        "data.aws_ami.bastion"
                    ],
                    "primary": {
                        "id": "i-0d66fb1dcf4fe8122",
                        "attributes": {
                            "ami": "ami-0c1299a276e458ddc",
                            "associate_public_ip_address": "true",
                            "availability_zone": "eu-west-1a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "bastion-instance-profile",
                            "id": "i-0d66fb1dcf4fe8122",
                            "instance_state": "running",
                            "instance_type": "t2.micro",
                            "ipv6_addresses.#": "0",
                            "key_name": "openshift",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "network_interface_id": "eni-05c6575a49e61f5b4",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-05c6575a49e61f5b4",
                            "private_dns": "ip-172-24-28-100.eu-west-1.compute.internal",
                            "private_ip": "172.24.28.100",
                            "public_dns": "ec2-52-50-233-119.eu-west-1.compute.amazonaws.com",
                            "public_ip": "52.50.233.119",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.iops": "100",
                            "root_block_device.0.volume_id": "vol-005c942987008559b",
                            "root_block_device.0.volume_size": "8",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-0639b7a831dc4ff9f",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Bastion",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "tenancy": "default",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "3",
                            "vpc_security_group_ids.2057965894": "sg-0c2fe488b9037abd5",
                            "vpc_security_group_ids.3064093409": "sg-037fd58b6512479a8",
                            "vpc_security_group_ids.547628087": "sg-058c637ff92b54d12"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_instance.master": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_iam_instance_profile.openshift-instance-profile",
                        "aws_key_pair.keypair",
                        "aws_security_group.openshift-public-egress",
                        "aws_security_group.openshift-public-ingress",
                        "aws_security_group.openshift-vpc",
                        "aws_subnet.public-subnet",
                        "data.aws_ami.node",
                        "data.template_file.setup-master"
                    ],
                    "primary": {
                        "id": "i-0003721027a913943",
                        "attributes": {
                            "ami": "ami-ccb7d2b5",
                            "associate_public_ip_address": "true",
                            "availability_zone": "eu-west-1a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "true",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "false",
                            "ebs_block_device.2659407853.iops": "240",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_id": "vol-06abdd8eb2a5b8ee1",
                            "ebs_block_device.2659407853.volume_size": "80",
                            "ebs_block_device.2659407853.volume_type": "gp2",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "openshift-instance-profile",
                            "id": "i-0003721027a913943",
                            "instance_state": "running",
                            "instance_type": "m4.xlarge",
                            "ipv6_addresses.#": "0",
                            "key_name": "openshift",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "network_interface_id": "eni-09ee79351ea35b1d3",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-09ee79351ea35b1d3",
                            "private_dns": "ip-172-24-28-83.eu-west-1.compute.internal",
                            "private_ip": "172.24.28.83",
                            "public_dns": "ec2-34-241-4-117.eu-west-1.compute.amazonaws.com",
                            "public_ip": "34.241.4.117",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_id": "vol-05bd03ced3f8b8744",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-0639b7a831dc4ff9f",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Master",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "tenancy": "default",
                            "user_data": "ed3b1e2175f8786b4c032c465e7cc746403b1022",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "3",
                            "vpc_security_group_ids.1377450606": "sg-0803ef0b169169ca0",
                            "vpc_security_group_ids.3064093409": "sg-037fd58b6512479a8",
                            "vpc_security_group_ids.547628087": "sg-058c637ff92b54d12"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_instance.node1": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_iam_instance_profile.openshift-instance-profile",
                        "aws_key_pair.keypair",
                        "aws_security_group.openshift-public-egress",
                        "aws_security_group.openshift-public-ingress",
                        "aws_security_group.openshift-vpc",
                        "aws_subnet.public-subnet",
                        "data.aws_ami.node",
                        "data.template_file.setup-node"
                    ],
                    "primary": {
                        "id": "i-03b8befb6685b4eec",
                        "attributes": {
                            "ami": "ami-ccb7d2b5",
                            "associate_public_ip_address": "true",
                            "availability_zone": "eu-west-1a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "true",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "false",
                            "ebs_block_device.2659407853.iops": "240",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_id": "vol-0883224c66d4e99f1",
                            "ebs_block_device.2659407853.volume_size": "80",
                            "ebs_block_device.2659407853.volume_type": "gp2",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "openshift-instance-profile",
                            "id": "i-03b8befb6685b4eec",
                            "instance_state": "running",
                            "instance_type": "t2.large",
                            "ipv6_addresses.#": "0",
                            "key_name": "openshift",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "network_interface_id": "eni-05baf0c9dc9d3856c",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-05baf0c9dc9d3856c",
                            "private_dns": "ip-172-24-28-250.eu-west-1.compute.internal",
                            "private_ip": "172.24.28.250",
                            "public_dns": "ec2-54-154-222-45.eu-west-1.compute.amazonaws.com",
                            "public_ip": "54.154.222.45",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_id": "vol-0404eab7c5a336a90",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-0639b7a831dc4ff9f",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Node 1",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "tenancy": "default",
                            "user_data": "ec87419f63c8dae8b3f9317b25c0e9dd80f84a47",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "3",
                            "vpc_security_group_ids.1377450606": "sg-0803ef0b169169ca0",
                            "vpc_security_group_ids.3064093409": "sg-037fd58b6512479a8",
                            "vpc_security_group_ids.547628087": "sg-058c637ff92b54d12"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_instance.node2": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_iam_instance_profile.openshift-instance-profile",
                        "aws_key_pair.keypair",
                        "aws_security_group.openshift-public-egress",
                        "aws_security_group.openshift-public-ingress",
                        "aws_security_group.openshift-vpc",
                        "aws_subnet.public-subnet",
                        "data.aws_ami.node",
                        "data.template_file.setup-node"
                    ],
                    "primary": {
                        "id": "i-0bf8e707a17758848",
                        "attributes": {
                            "ami": "ami-ccb7d2b5",
                            "associate_public_ip_address": "true",
                            "availability_zone": "eu-west-1a",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.2659407853.delete_on_termination": "true",
                            "ebs_block_device.2659407853.device_name": "/dev/sdf",
                            "ebs_block_device.2659407853.encrypted": "false",
                            "ebs_block_device.2659407853.iops": "240",
                            "ebs_block_device.2659407853.snapshot_id": "",
                            "ebs_block_device.2659407853.volume_id": "vol-0029c59880f3740eb",
                            "ebs_block_device.2659407853.volume_size": "80",
                            "ebs_block_device.2659407853.volume_type": "gp2",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "openshift-instance-profile",
                            "id": "i-0bf8e707a17758848",
                            "instance_state": "running",
                            "instance_type": "t2.large",
                            "ipv6_addresses.#": "0",
                            "key_name": "openshift",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "network_interface_id": "eni-0a464b3db2c1623cd",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-0a464b3db2c1623cd",
                            "private_dns": "ip-172-24-28-201.eu-west-1.compute.internal",
                            "private_ip": "172.24.28.201",
                            "public_dns": "ec2-34-243-210-123.eu-west-1.compute.amazonaws.com",
                            "public_ip": "34.243.210.123",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.iops": "150",
                            "root_block_device.0.volume_id": "vol-0ce6fbd9546a11ca5",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "true",
                            "subnet_id": "subnet-0639b7a831dc4ff9f",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Node 2",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "tenancy": "default",
                            "user_data": "ec87419f63c8dae8b3f9317b25c0e9dd80f84a47",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "3",
                            "vpc_security_group_ids.1377450606": "sg-0803ef0b169169ca0",
                            "vpc_security_group_ids.3064093409": "sg-037fd58b6512479a8",
                            "vpc_security_group_ids.547628087": "sg-058c637ff92b54d12"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_key_pair.keypair": {
                    "type": "aws_key_pair",
                    "depends_on": [],
                    "primary": {
                        "id": "openshift",
                        "attributes": {
                            "id": "openshift",
                            "key_name": "openshift",
                            "public_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCk7l41++cXL0c2+rBKrgiKrkkrQOkJL0kFMr1UbcYF0N7mlxxRudQeKU+ngRCeASH77FnBP1hVbCvTs41K7vjZgBHw9qS4LNdWLN+i88tfYEMJ1Yf78C5l7ROZ9C2PEe0DShqOK8WIFaglWc4obw+m8c2SrxLSU71GnB+/RYqyeBDBl8HoyQ4RmYr9GgPefzNCnYJjtlmvE9xI4d5pjws6/n4vT0YOyrRxtkQ+fs7dQSzsse58hHNxQyEKhAsQcXzJ+sfhUQ36juS7JWwWlOpq/or7cRHPMO3M6vyu58LbcQcGpouJcysXX5q3OxNBtYekAAKuFCAOvPnWXAX1zN8v"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_route53_record.master-a-record": {
                    "type": "aws_route53_record",
                    "depends_on": [
                        "aws_instance.master",
                        "aws_route53_zone.internal"
                    ],
                    "primary": {
                        "id": "Z135WN327QB7SH_master.openshift.local_A",
                        "attributes": {
                            "allow_overwrite": "true",
                            "fqdn": "master.openshift.local",
                            "health_check_id": "",
                            "id": "Z135WN327QB7SH_master.openshift.local_A",
                            "name": "master.openshift.local",
                            "records.#": "1",
                            "records.29218055": "172.24.28.83",
                            "set_identifier": "",
                            "ttl": "300",
                            "type": "A",
                            "zone_id": "Z135WN327QB7SH"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_route53_record.node1-a-record": {
                    "type": "aws_route53_record",
                    "depends_on": [
                        "aws_instance.node1",
                        "aws_route53_zone.internal"
                    ],
                    "primary": {
                        "id": "Z135WN327QB7SH_node1.openshift.local_A",
                        "attributes": {
                            "allow_overwrite": "true",
                            "fqdn": "node1.openshift.local",
                            "health_check_id": "",
                            "id": "Z135WN327QB7SH_node1.openshift.local_A",
                            "name": "node1.openshift.local",
                            "records.#": "1",
                            "records.829674759": "172.24.28.250",
                            "set_identifier": "",
                            "ttl": "300",
                            "type": "A",
                            "zone_id": "Z135WN327QB7SH"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_route53_record.node2-a-record": {
                    "type": "aws_route53_record",
                    "depends_on": [
                        "aws_instance.node2",
                        "aws_route53_zone.internal"
                    ],
                    "primary": {
                        "id": "Z135WN327QB7SH_node2.openshift.local_A",
                        "attributes": {
                            "allow_overwrite": "true",
                            "fqdn": "node2.openshift.local",
                            "health_check_id": "",
                            "id": "Z135WN327QB7SH_node2.openshift.local_A",
                            "name": "node2.openshift.local",
                            "records.#": "1",
                            "records.990056916": "172.24.28.201",
                            "set_identifier": "",
                            "ttl": "300",
                            "type": "A",
                            "zone_id": "Z135WN327QB7SH"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_route53_zone.internal": {
                    "type": "aws_route53_zone",
                    "depends_on": [],
                    "primary": {
                        "id": "Z135WN327QB7SH",
                        "attributes": {
                            "comment": "OpenShift Cluster Internal DNS",
                            "force_destroy": "false",
                            "id": "Z135WN327QB7SH",
                            "name": "openshift.local",
                            "name_servers.#": "4",
                            "name_servers.0": "ns-0.awsdns-00.com.",
                            "name_servers.1": "ns-1024.awsdns-00.org.",
                            "name_servers.2": "ns-1536.awsdns-00.co.uk.",
                            "name_servers.3": "ns-512.awsdns-00.net.",
                            "tags.%": "2",
                            "tags.Name": "OpenShift Internal DNS",
                            "tags.Project": "openshift",
                            "vpc_id": "vpc-4fac482b",
                            "vpc_region": "eu-west-1",
                            "zone_id": "Z135WN327QB7SH"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_route_table_association.public-subnet": {
                    "type": "aws_route_table_association",
                    "depends_on": [
                        "aws_subnet.public-subnet"
                    ],
                    "primary": {
                        "id": "rtbassoc-0e7e94ec14197237c",
                        "attributes": {
                            "id": "rtbassoc-0e7e94ec14197237c",
                            "route_table_id": "rtb-0b30646f",
                            "subnet_id": "subnet-0639b7a831dc4ff9f"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_security_group.openshift-public-egress": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-037fd58b6512479a8",
                        "attributes": {
                            "description": "Security group that allows egress to the internet for instances over HTTP and HTTPS.",
                            "egress.#": "5",
                            "egress.1421879845.cidr_blocks.#": "1",
                            "egress.1421879845.cidr_blocks.0": "172.20.0.0/16",
                            "egress.1421879845.description": "",
                            "egress.1421879845.from_port": "0",
                            "egress.1421879845.ipv6_cidr_blocks.#": "0",
                            "egress.1421879845.prefix_list_ids.#": "0",
                            "egress.1421879845.protocol": "-1",
                            "egress.1421879845.security_groups.#": "0",
                            "egress.1421879845.self": "false",
                            "egress.1421879845.to_port": "0",
                            "egress.2214680975.cidr_blocks.#": "1",
                            "egress.2214680975.cidr_blocks.0": "0.0.0.0/0",
                            "egress.2214680975.description": "",
                            "egress.2214680975.from_port": "80",
                            "egress.2214680975.ipv6_cidr_blocks.#": "0",
                            "egress.2214680975.prefix_list_ids.#": "0",
                            "egress.2214680975.protocol": "tcp",
                            "egress.2214680975.security_groups.#": "0",
                            "egress.2214680975.self": "false",
                            "egress.2214680975.to_port": "80",
                            "egress.2617001939.cidr_blocks.#": "1",
                            "egress.2617001939.cidr_blocks.0": "0.0.0.0/0",
                            "egress.2617001939.description": "",
                            "egress.2617001939.from_port": "443",
                            "egress.2617001939.ipv6_cidr_blocks.#": "0",
                            "egress.2617001939.prefix_list_ids.#": "0",
                            "egress.2617001939.protocol": "tcp",
                            "egress.2617001939.security_groups.#": "0",
                            "egress.2617001939.self": "false",
                            "egress.2617001939.to_port": "443",
                            "egress.3068409405.cidr_blocks.#": "1",
                            "egress.3068409405.cidr_blocks.0": "0.0.0.0/0",
                            "egress.3068409405.description": "",
                            "egress.3068409405.from_port": "8",
                            "egress.3068409405.ipv6_cidr_blocks.#": "0",
                            "egress.3068409405.prefix_list_ids.#": "0",
                            "egress.3068409405.protocol": "icmp",
                            "egress.3068409405.security_groups.#": "0",
                            "egress.3068409405.self": "false",
                            "egress.3068409405.to_port": "0",
                            "egress.324282237.cidr_blocks.#": "1",
                            "egress.324282237.cidr_blocks.0": "172.19.0.0/16",
                            "egress.324282237.description": "",
                            "egress.324282237.from_port": "0",
                            "egress.324282237.ipv6_cidr_blocks.#": "0",
                            "egress.324282237.prefix_list_ids.#": "0",
                            "egress.324282237.protocol": "-1",
                            "egress.324282237.security_groups.#": "0",
                            "egress.324282237.self": "false",
                            "egress.324282237.to_port": "0",
                            "id": "sg-037fd58b6512479a8",
                            "ingress.#": "0",
                            "name": "openshift-public-egress",
                            "owner_id": "807891339983",
                            "revoke_rules_on_delete": "false",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Public Access",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "vpc_id": "vpc-4fac482b"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_security_group.openshift-public-ingress": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-0803ef0b169169ca0",
                        "attributes": {
                            "description": "Security group that allows public ingress to instances, HTTP, HTTPS and more.",
                            "egress.#": "0",
                            "id": "sg-0803ef0b169169ca0",
                            "ingress.#": "5",
                            "ingress.2214680975.cidr_blocks.#": "1",
                            "ingress.2214680975.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.2214680975.description": "",
                            "ingress.2214680975.from_port": "80",
                            "ingress.2214680975.ipv6_cidr_blocks.#": "0",
                            "ingress.2214680975.protocol": "tcp",
                            "ingress.2214680975.security_groups.#": "0",
                            "ingress.2214680975.self": "false",
                            "ingress.2214680975.to_port": "80",
                            "ingress.2617001939.cidr_blocks.#": "1",
                            "ingress.2617001939.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.2617001939.description": "",
                            "ingress.2617001939.from_port": "443",
                            "ingress.2617001939.ipv6_cidr_blocks.#": "0",
                            "ingress.2617001939.protocol": "tcp",
                            "ingress.2617001939.security_groups.#": "0",
                            "ingress.2617001939.self": "false",
                            "ingress.2617001939.to_port": "443",
                            "ingress.2715662207.cidr_blocks.#": "1",
                            "ingress.2715662207.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.2715662207.description": "",
                            "ingress.2715662207.from_port": "8443",
                            "ingress.2715662207.ipv6_cidr_blocks.#": "0",
                            "ingress.2715662207.protocol": "tcp",
                            "ingress.2715662207.security_groups.#": "0",
                            "ingress.2715662207.self": "false",
                            "ingress.2715662207.to_port": "8443",
                            "ingress.3068409405.cidr_blocks.#": "1",
                            "ingress.3068409405.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.3068409405.description": "",
                            "ingress.3068409405.from_port": "8",
                            "ingress.3068409405.ipv6_cidr_blocks.#": "0",
                            "ingress.3068409405.protocol": "icmp",
                            "ingress.3068409405.security_groups.#": "0",
                            "ingress.3068409405.self": "false",
                            "ingress.3068409405.to_port": "0",
                            "ingress.516175195.cidr_blocks.#": "1",
                            "ingress.516175195.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.516175195.description": "",
                            "ingress.516175195.from_port": "8080",
                            "ingress.516175195.ipv6_cidr_blocks.#": "0",
                            "ingress.516175195.protocol": "tcp",
                            "ingress.516175195.security_groups.#": "0",
                            "ingress.516175195.self": "false",
                            "ingress.516175195.to_port": "8080",
                            "name": "openshift-public-ingress",
                            "owner_id": "807891339983",
                            "revoke_rules_on_delete": "false",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Public Access",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "vpc_id": "vpc-4fac482b"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_security_group.openshift-ssh": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-0c2fe488b9037abd5",
                        "attributes": {
                            "description": "Security group that allows public ingress over SSH.",
                            "egress.#": "0",
                            "id": "sg-0c2fe488b9037abd5",
                            "ingress.#": "1",
                            "ingress.2541437006.cidr_blocks.#": "1",
                            "ingress.2541437006.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.2541437006.description": "",
                            "ingress.2541437006.from_port": "22",
                            "ingress.2541437006.ipv6_cidr_blocks.#": "0",
                            "ingress.2541437006.protocol": "tcp",
                            "ingress.2541437006.security_groups.#": "0",
                            "ingress.2541437006.self": "false",
                            "ingress.2541437006.to_port": "22",
                            "name": "openshift-ssh",
                            "owner_id": "807891339983",
                            "revoke_rules_on_delete": "false",
                            "tags.%": "3",
                            "tags.Name": "OpenShift SSH Access",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "vpc_id": "vpc-4fac482b"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_security_group.openshift-vpc": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-058c637ff92b54d12",
                        "attributes": {
                            "description": "Default security group that allows all instances in the VPC to talk to each other over any port and protocol.",
                            "egress.#": "1",
                            "egress.753360330.cidr_blocks.#": "0",
                            "egress.753360330.description": "",
                            "egress.753360330.from_port": "0",
                            "egress.753360330.ipv6_cidr_blocks.#": "0",
                            "egress.753360330.prefix_list_ids.#": "0",
                            "egress.753360330.protocol": "-1",
                            "egress.753360330.security_groups.#": "0",
                            "egress.753360330.self": "true",
                            "egress.753360330.to_port": "0",
                            "id": "sg-058c637ff92b54d12",
                            "ingress.#": "1",
                            "ingress.753360330.cidr_blocks.#": "0",
                            "ingress.753360330.description": "",
                            "ingress.753360330.from_port": "0",
                            "ingress.753360330.ipv6_cidr_blocks.#": "0",
                            "ingress.753360330.protocol": "-1",
                            "ingress.753360330.security_groups.#": "0",
                            "ingress.753360330.self": "true",
                            "ingress.753360330.to_port": "0",
                            "name": "openshift-vpc",
                            "owner_id": "807891339983",
                            "revoke_rules_on_delete": "false",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Internal VPC",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "vpc_id": "vpc-4fac482b"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_subnet.public-subnet": {
                    "type": "aws_subnet",
                    "depends_on": [],
                    "primary": {
                        "id": "subnet-0639b7a831dc4ff9f",
                        "attributes": {
                            "assign_ipv6_address_on_creation": "false",
                            "availability_zone": "eu-west-1a",
                            "cidr_block": "172.24.28.0/24",
                            "id": "subnet-0639b7a831dc4ff9f",
                            "map_public_ip_on_launch": "true",
                            "tags.%": "3",
                            "tags.Name": "OpenShift Public Subnet",
                            "tags.Project": "openshift",
                            "tags.kubernetes.io/cluster/Openshift": "owned",
                            "vpc_id": "vpc-4fac482b"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.aws_ami.bastion": {
                    "type": "aws_ami",
                    "depends_on": [],
                    "primary": {
                        "id": "ami-0c1299a276e458ddc",
                        "attributes": {
                            "architecture": "x86_64",
                            "block_device_mappings.#": "1",
                            "block_device_mappings.340275815.device_name": "/dev/xvda",
                            "block_device_mappings.340275815.ebs.%": "6",
                            "block_device_mappings.340275815.ebs.delete_on_termination": "true",
                            "block_device_mappings.340275815.ebs.encrypted": "false",
                            "block_device_mappings.340275815.ebs.iops": "0",
                            "block_device_mappings.340275815.ebs.snapshot_id": "snap-0fc63e7b864024b24",
                            "block_device_mappings.340275815.ebs.volume_size": "8",
                            "block_device_mappings.340275815.ebs.volume_type": "gp2",
                            "block_device_mappings.340275815.no_device": "",
                            "block_device_mappings.340275815.virtual_name": "",
                            "creation_date": "2018-03-07T07:04:49.000Z",
                            "description": "Amazon Linux AMI 2017.09.1-testlongids.20180307 x86_64 HVM GP2",
                            "filter.#": "4",
                            "filter.1281954306.name": "root-device-type",
                            "filter.1281954306.values.#": "1",
                            "filter.1281954306.values.0": "ebs",
                            "filter.2313955347.name": "name",
                            "filter.2313955347.values.#": "1",
                            "filter.2313955347.values.0": "amzn-ami-hvm-*",
                            "filter.3386043752.name": "architecture",
                            "filter.3386043752.values.#": "1",
                            "filter.3386043752.values.0": "x86_64",
                            "filter.490168357.name": "virtualization-type",
                            "filter.490168357.values.#": "1",
                            "filter.490168357.values.0": "hvm",
                            "hypervisor": "xen",
                            "id": "ami-0c1299a276e458ddc",
                            "image_id": "ami-0c1299a276e458ddc",
                            "image_location": "amazon/amzn-ami-hvm-2017.09.1-testlongids.20180307-x86_64-gp2",
                            "image_owner_alias": "amazon",
                            "image_type": "machine",
                            "most_recent": "true",
                            "name": "amzn-ami-hvm-2017.09.1-testlongids.20180307-x86_64-gp2",
                            "owner_id": "137112412989",
                            "owners.#": "1",
                            "owners.0": "137112412989",
                            "product_codes.#": "0",
                            "public": "true",
                            "root_device_name": "/dev/xvda",
                            "root_device_type": "ebs",
                            "root_snapshot_id": "snap-0fc63e7b864024b24",
                            "sriov_net_support": "simple",
                            "state": "available",
                            "state_reason.%": "2",
                            "state_reason.code": "UNSET",
                            "state_reason.message": "UNSET",
                            "tags.%": "0",
                            "virtualization_type": "hvm"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.aws_ami.node": {
                    "type": "aws_ami",
                    "depends_on": [],
                    "primary": {
                        "id": "ami-ccb7d2b5",
                        "attributes": {
                            "architecture": "x86_64",
                            "block_device_mappings.#": "1",
                            "block_device_mappings.309099847.device_name": "/dev/sda1",
                            "block_device_mappings.309099847.ebs.%": "6",
                            "block_device_mappings.309099847.ebs.delete_on_termination": "true",
                            "block_device_mappings.309099847.ebs.encrypted": "false",
                            "block_device_mappings.309099847.ebs.iops": "0",
                            "block_device_mappings.309099847.ebs.snapshot_id": "snap-095ccf2d2c99bc4bc",
                            "block_device_mappings.309099847.ebs.volume_size": "10",
                            "block_device_mappings.309099847.ebs.volume_type": "gp2",
                            "block_device_mappings.309099847.no_device": "",
                            "block_device_mappings.309099847.virtual_name": "",
                            "creation_date": "2018-01-22T17:40:16.000Z",
                            "description": "Provided by Red Hat, Inc.",
                            "filter.#": "4",
                            "filter.1281954306.name": "root-device-type",
                            "filter.1281954306.values.#": "1",
                            "filter.1281954306.values.0": "ebs",
                            "filter.2088548975.name": "name",
                            "filter.2088548975.values.#": "1",
                            "filter.2088548975.values.0": "RHEL-7.4*",
                            "filter.3386043752.name": "architecture",
                            "filter.3386043752.values.#": "1",
                            "filter.3386043752.values.0": "x86_64",
                            "filter.490168357.name": "virtualization-type",
                            "filter.490168357.values.#": "1",
                            "filter.490168357.values.0": "hvm",
                            "hypervisor": "xen",
                            "id": "ami-ccb7d2b5",
                            "image_id": "ami-ccb7d2b5",
                            "image_location": "309956199498/RHEL-7.4_HVM-20180122-x86_64-1-Hourly2-GP2",
                            "image_type": "machine",
                            "most_recent": "true",
                            "name": "RHEL-7.4_HVM-20180122-x86_64-1-Hourly2-GP2",
                            "owner_id": "309956199498",
                            "owners.#": "1",
                            "owners.0": "309956199498",
                            "product_codes.#": "0",
                            "public": "true",
                            "root_device_name": "/dev/sda1",
                            "root_device_type": "ebs",
                            "root_snapshot_id": "snap-095ccf2d2c99bc4bc",
                            "sriov_net_support": "simple",
                            "state": "available",
                            "state_reason.%": "2",
                            "state_reason.code": "UNSET",
                            "state_reason.message": "UNSET",
                            "tags.%": "0",
                            "virtualization_type": "hvm"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.template_file.inventory": {
                    "type": "template_file",
                    "depends_on": [
                        "aws_iam_access_key.openshift-aws-user",
                        "aws_instance.master",
                        "aws_instance.node1",
                        "aws_instance.node2"
                    ],
                    "primary": {
                        "id": "0a4e7dfae1f4a7ccf6932ac7726a79d04f6cc6624b4004d1e22df6fde8dd7eca",
                        "attributes": {
                            "id": "0a4e7dfae1f4a7ccf6932ac7726a79d04f6cc6624b4004d1e22df6fde8dd7eca",
                            "rendered": "# OpenShift Inventory Template.\n# Note that when the infrastructure is generated by Terraform, this file is\n# expanded into './inventory.cfg', based on the rules in:\n#\n#   ./modules/openshift/08-inventory.tf\n\n# Create an OSEv3 group that contains the masters and nodes groups\n[OSEv3:children]\nmasters\nnodes\netcd\n\n# Set variables common for all OSEv3 hosts\n[OSEv3:vars]\n# SSH user, this user should allow ssh based auth without requiring a password\nansible_ssh_user=ec2-user\n\n# If ansible_ssh_user is not root, ansible_become must be set to true\nansible_become=true\n\n# Deploy OpenShift origin.\ndeployment_type=origin\n#openshift_deployment_type=origin\n#openshift_image_tag=\"v3.7.1\"\n#openshift_pkg_version=\"-3.7\"\n#containerized=false\n\n# logging\nopenshift_logging_install_logging=true\n\n# We need a wildcard DNS setup for our public access to services, fortunately\n# we can use the superb xip.io to get one for free.\nopenshift_public_hostname=34.241.4.117.xip.io\nopenshift_master_default_subdomain=34.241.4.117.xip.io\n\n# Use an htpasswd file as the indentity provider.\nopenshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]\n\n# disable check on package version\nopenshift_disable_check=package_version\n\n# Uncomment the line below to enable metrics for the cluster.\nopenshift_metrics_install_metrics=true\n\n# Use API keys rather than instance roles so that tenant containers don't get\n# Openshift's EC2/EBS permissions\nopenshift_cloudprovider_kind=aws\nopenshift_clusterid=Openshift\nopenshift_cloudprovider_aws_access_key=AKIAJMOIFW5N7PCM2OYQ\nopenshift_cloudprovider_aws_secret_key=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\n\n# Docker additional external insecure repository\nopenshift_docker_additional_registries=docker-CG.cgnet.nl \nopenshift_docker_insecure_registries=docker-CG.cgnet.nl \n\n# Upgrade Hooks\n#\n# Hooks are available to run custom tasks at various points during a cluster\n# upgrade. Each hook should point to a file with Ansible tasks defined. Suggest using\n# absolute paths, if not the path will be treated as relative to the file where the\n# hook is actually used.\n\n# Define an additional dnsmasq.conf file to deploy to /etc/dnsmasq.d/openshift-ansible.conf\n# This is useful for POC environments where DNS may not actually be available yet or to set\n# options like 'strict-order' to alter dnsmasq configuration.\nopenshift_node_dnsmasq_additional_config_file=/home/ec2-user/cg-dnsmasq.cfg\n\n# additional cors origins\nosm_custom_cors_origins=['sc.*','s3.*']\n\n# LDAP auth\n#openshift_master_identity_providers=[{'name': 'cg_ldap_provider','challenge': 'true','login': 'true','kind': 'LDAPPasswordIdentityProvider','attributes': {'id': ['dn'],'email': ['mail'],'name': ['cn'],'preferredUsername': ['uid']},'bindDN': '','bindPassword': '','ca': '','insecure': 'true','url': 'ldap://zd005.cgnet.nl:389/cn=Manager,dc=cgnet,dc=nl?uid'}]\n\n# Create the masters host group. Note that due do:\n#   https://github.com/dwmkerr/terraform-aws-openshift/issues/40\n# We cannot use the internal DNS names (such as master.openshift.local) as there\n# is a bug with the installer when using the AWS cloud provider.\n[masters]\nip-172-24-28-83.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-83.eu-west-1.compute.internal\n\n# host group for etcd\n[etcd]\nip-172-24-28-83.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-83.eu-west-1.compute.internal\n\n# host group for nodes, includes region info\n[nodes]\nip-172-24-28-83.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-83.eu-west-1.compute.internal openshift_node_labels=\"{'region': 'infra', 'zone': 'default'}\" openshift_schedulable=true\nip-172-24-28-250.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-250.eu-west-1.compute.internal openshift_node_labels=\"{'region': 'primary', 'zone': 'east'}\"\nip-172-24-28-201.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-201.eu-west-1.compute.internal openshift_node_labels=\"{'region': 'primary', 'zone': 'west'}\"\n\n\n",
                            "template": "# OpenShift Inventory Template.\n# Note that when the infrastructure is generated by Terraform, this file is\n# expanded into './inventory.cfg', based on the rules in:\n#\n#   ./modules/openshift/08-inventory.tf\n\n# Create an OSEv3 group that contains the masters and nodes groups\n[OSEv3:children]\nmasters\nnodes\netcd\n\n# Set variables common for all OSEv3 hosts\n[OSEv3:vars]\n# SSH user, this user should allow ssh based auth without requiring a password\nansible_ssh_user=ec2-user\n\n# If ansible_ssh_user is not root, ansible_become must be set to true\nansible_become=true\n\n# Deploy OpenShift origin.\ndeployment_type=origin\n#openshift_deployment_type=origin\n#openshift_image_tag=\"v3.7.1\"\n#openshift_pkg_version=\"-3.7\"\n#containerized=false\n\n# logging\nopenshift_logging_install_logging=true\n\n# We need a wildcard DNS setup for our public access to services, fortunately\n# we can use the superb xip.io to get one for free.\nopenshift_public_hostname=${public_hostname}\nopenshift_master_default_subdomain=${public_hostname}\n\n# Use an htpasswd file as the indentity provider.\nopenshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]\n\n# disable check on package version\nopenshift_disable_check=package_version\n\n# Uncomment the line below to enable metrics for the cluster.\nopenshift_metrics_install_metrics=true\n\n# Use API keys rather than instance roles so that tenant containers don't get\n# Openshift's EC2/EBS permissions\nopenshift_cloudprovider_kind=aws\nopenshift_clusterid=${cluster_id}\nopenshift_cloudprovider_aws_access_key=${access_key}\nopenshift_cloudprovider_aws_secret_key=${secret_key}\n\n# Docker additional external insecure repository\nopenshift_docker_additional_registries=docker-CG.cgnet.nl \nopenshift_docker_insecure_registries=docker-CG.cgnet.nl \n\n# Upgrade Hooks\n#\n# Hooks are available to run custom tasks at various points during a cluster\n# upgrade. Each hook should point to a file with Ansible tasks defined. Suggest using\n# absolute paths, if not the path will be treated as relative to the file where the\n# hook is actually used.\n\n# Define an additional dnsmasq.conf file to deploy to /etc/dnsmasq.d/openshift-ansible.conf\n# This is useful for POC environments where DNS may not actually be available yet or to set\n# options like 'strict-order' to alter dnsmasq configuration.\nopenshift_node_dnsmasq_additional_config_file=${dnsmasq_conf}\n\n# additional cors origins\nosm_custom_cors_origins=['sc.*','s3.*']\n\n# LDAP auth\n#openshift_master_identity_providers=[{'name': 'cg_ldap_provider','challenge': 'true','login': 'true','kind': 'LDAPPasswordIdentityProvider','attributes': {'id': ['dn'],'email': ['mail'],'name': ['cn'],'preferredUsername': ['uid']},'bindDN': '','bindPassword': '','ca': '','insecure': 'true','url': 'ldap://zd005.cgnet.nl:389/cn=Manager,dc=cgnet,dc=nl?uid'}]\n\n# Create the masters host group. Note that due do:\n#   https://github.com/dwmkerr/terraform-aws-openshift/issues/40\n# We cannot use the internal DNS names (such as master.openshift.local) as there\n# is a bug with the installer when using the AWS cloud provider.\n[masters]\n${master_hostname} openshift_hostname=${master_hostname}\n\n# host group for etcd\n[etcd]\n${master_hostname} openshift_hostname=${master_hostname}\n\n# host group for nodes, includes region info\n[nodes]\n${master_hostname} openshift_hostname=${master_hostname} openshift_node_labels=\"{'region': 'infra', 'zone': 'default'}\" openshift_schedulable=true\n${node1_hostname} openshift_hostname=${node1_hostname} openshift_node_labels=\"{'region': 'primary', 'zone': 'east'}\"\n${node2_hostname} openshift_hostname=${node2_hostname} openshift_node_labels=\"{'region': 'primary', 'zone': 'west'}\"\n\n\n",
                            "vars.%": "9",
                            "vars.access_key": "AKIAJMOIFW5N7PCM2OYQ",
                            "vars.cluster_id": "Openshift",
                            "vars.dnsmasq_conf": "/home/ec2-user/cg-dnsmasq.cfg",
                            "vars.master_hostname": "ip-172-24-28-83.eu-west-1.compute.internal",
                            "vars.master_inventory": "ip-172-24-28-83.eu-west-1.compute.internal",
                            "vars.node1_hostname": "ip-172-24-28-250.eu-west-1.compute.internal",
                            "vars.node2_hostname": "ip-172-24-28-201.eu-west-1.compute.internal",
                            "vars.public_hostname": "34.241.4.117.xip.io",
                            "vars.secret_key": "jsNNQBzp0d5oNgTBfriiLhXfVu02V9FvHnjhdpQs"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.setup-master": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "c301fc35aefab0b54cfca98de5a57562c7f1472f106c77d522c800f2eff50ac4",
                        "attributes": {
                            "id": "c301fc35aefab0b54cfca98de5a57562c7f1472f106c77d522c800f2eff50ac4",
                            "rendered": "#!/usr/bin/env bash\n\n# This script template is expected to be populated during the setup of a\n# OpenShift  node. It runs on host startup.\n\n# Log everything we do.\nset -x\nexec \u003e /var/log/user-data.log 2\u003e\u00261\n\nmkdir -p /etc/aws/\ncat \u003e /etc/aws/aws.conf \u003c\u003c- EOF\n[Global]\nZone = eu-west-1a\nEOF\n\n# Create initial logs config.\ncat \u003e ./awslogs.conf \u003c\u003c EOF\n[general]\nstate_file = /var/awslogs/state/agent-state\n\n[/var/log/messages]\nlog_stream_name = openshift-master-{instance_id}\nlog_group_name = /var/log/messages\nfile = /var/log/messages\ndatetime_format = %b %d %H:%M:%S\nbuffer_duration = 5000\ninitial_position = start_of_file\n\n[/var/log/user-data.log]\nlog_stream_name = openshift-master-{instance_id}\nlog_group_name = /var/log/user-data.log\nfile = /var/log/user-data.log\nEOF\n\n# Download and run the AWS logs agent.\ncurl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O\npython ./awslogs-agent-setup.py --non-interactive --region eu-west-1 -c ./awslogs.conf\n\n# Start the awslogs service, also start on reboot.\n# Note: Errors go to /var/log/awslogs.log\nservice awslogs start\nchkconfig awslogs on\n\n# OpenShift setup\n# See: https://docs.openshift.org/latest/install_config/install/host_preparation.html\n\n# Install packages required to setup OpenShift.\nyum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools kexec-tools sos psacct\n#yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools\nyum update -y\n\n# systemctl reboot\n\n# yum install atomic\n\n\n# Note: The step below is not in the official docs, I needed it to install\n# Docker. If anyone finds out why, I'd love to know.\n# See: https://forums.aws.amazon.com/thread.jspa?messageID=574126\nyum-config-manager --enable rhui-REGION-rhel-server-extras\n\n# Docker setup. Check the version with `docker version`, should be 1.13.\nyum install -y docker\n\n# Configure the Docker storage back end to prepare and use our EBS block device.\n# https://docs.openshift.org/latest/install_config/install/host_preparation.html#configuring-docker-storage\n# Why xvdf? See:\n# http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\nusermod -aG docker $(whoami)\ncat \u003c\u003cEOF \u003e /etc/sysconfig/docker-storage-setup\nDEVS=/dev/xvdf\nVG=docker-vg\nEOF\ndocker-storage-setup\n\n# Restart docker and go to clean state as required by docker-storage-setup.\nsystemctl stop docker\nrm -rf /var/lib/docker/*\nsystemctl restart docker\n\n# Allow the ec2-user to sudo without a tty, which is required when we run post\n# install scripts on the server.\necho Defaults:ec2-user \\!requiretty \u003e\u003e /etc/sudoers\n",
                            "template": "#!/usr/bin/env bash\n\n# This script template is expected to be populated during the setup of a\n# OpenShift  node. It runs on host startup.\n\n# Log everything we do.\nset -x\nexec \u003e /var/log/user-data.log 2\u003e\u00261\n\nmkdir -p /etc/aws/\ncat \u003e /etc/aws/aws.conf \u003c\u003c- EOF\n[Global]\nZone = ${availability_zone}\nEOF\n\n# Create initial logs config.\ncat \u003e ./awslogs.conf \u003c\u003c EOF\n[general]\nstate_file = /var/awslogs/state/agent-state\n\n[/var/log/messages]\nlog_stream_name = openshift-master-{instance_id}\nlog_group_name = /var/log/messages\nfile = /var/log/messages\ndatetime_format = %b %d %H:%M:%S\nbuffer_duration = 5000\ninitial_position = start_of_file\n\n[/var/log/user-data.log]\nlog_stream_name = openshift-master-{instance_id}\nlog_group_name = /var/log/user-data.log\nfile = /var/log/user-data.log\nEOF\n\n# Download and run the AWS logs agent.\ncurl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O\npython ./awslogs-agent-setup.py --non-interactive --region eu-west-1 -c ./awslogs.conf\n\n# Start the awslogs service, also start on reboot.\n# Note: Errors go to /var/log/awslogs.log\nservice awslogs start\nchkconfig awslogs on\n\n# OpenShift setup\n# See: https://docs.openshift.org/latest/install_config/install/host_preparation.html\n\n# Install packages required to setup OpenShift.\nyum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools kexec-tools sos psacct\n#yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools\nyum update -y\n\n# systemctl reboot\n\n# yum install atomic\n\n\n# Note: The step below is not in the official docs, I needed it to install\n# Docker. If anyone finds out why, I'd love to know.\n# See: https://forums.aws.amazon.com/thread.jspa?messageID=574126\nyum-config-manager --enable rhui-REGION-rhel-server-extras\n\n# Docker setup. Check the version with `docker version`, should be 1.13.\nyum install -y docker\n\n# Configure the Docker storage back end to prepare and use our EBS block device.\n# https://docs.openshift.org/latest/install_config/install/host_preparation.html#configuring-docker-storage\n# Why xvdf? See:\n# http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\nusermod -aG docker $(whoami)\ncat \u003c\u003cEOF \u003e /etc/sysconfig/docker-storage-setup\nDEVS=/dev/xvdf\nVG=docker-vg\nEOF\ndocker-storage-setup\n\n# Restart docker and go to clean state as required by docker-storage-setup.\nsystemctl stop docker\nrm -rf /var/lib/docker/*\nsystemctl restart docker\n\n# Allow the ec2-user to sudo without a tty, which is required when we run post\n# install scripts on the server.\necho Defaults:ec2-user \\!requiretty \u003e\u003e /etc/sudoers\n",
                            "vars.%": "1",
                            "vars.availability_zone": "eu-west-1a"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.setup-node": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "60bb25687cf1b0a08ec18ac21b628429390bc8105222d36c35b09c09e3cf44fa",
                        "attributes": {
                            "id": "60bb25687cf1b0a08ec18ac21b628429390bc8105222d36c35b09c09e3cf44fa",
                            "rendered": "#!/usr/bin/env bash\n\n# This script template is expected to be populated during the setup of a\n# OpenShift  node. It runs on host startup.\n\n# Log everything we do.\nset -x\nexec \u003e /var/log/user-data.log 2\u003e\u00261\n\nmkdir -p /etc/aws/\ncat \u003e /etc/aws/aws.conf \u003c\u003c- EOF\n[Global]\nZone = eu-west-1a\nEOF\n\n# Create initial logs config.\ncat \u003e ./awslogs.conf \u003c\u003c- EOF\n[general]\nstate_file = /var/awslogs/state/agent-state\n\n[/var/log/messages]\nlog_stream_name = openshift-node-{instance_id}\nlog_group_name = /var/log/messages\nfile = /var/log/messages\ndatetime_format = %b %d %H:%M:%S\nbuffer_duration = 5000\ninitial_position = start_of_file\n\n[/var/log/user-data.log]\nlog_stream_name = openshift-node-{instance_id}\nlog_group_name = /var/log/user-data.log\nfile = /var/log/user-data.log\nEOF\n\n# Download and run the AWS logs agent.\ncurl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O\npython ./awslogs-agent-setup.py --non-interactive --region eu-west-1 -c ./awslogs.conf\n\n# Start the awslogs service, also start on reboot.\n# Note: Errors go to /var/log/awslogs.log\nservice awslogs start\nchkconfig awslogs on\n\n# OpenShift setup\n# See: https://docs.openshift.org/latest/install_config/install/host_preparation.html\n\n# Install packages required to setup OpenShift.\nyum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools kexec-tools sos psacct\n#yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools\nyum update -y\n\n# systemctl reboot\n\n# yum install atomic\n\n# Note: The step below is not in the official docs, I needed it to install\n# Docker. If anyone finds out why, I'd love to know.\n# See: https://forums.aws.amazon.com/thread.jspa?messageID=574126\nyum-config-manager --enable rhui-REGION-rhel-server-extras\n\n## Docker setup. Check the version with `docker version`, should be 1.12.\nyum install -y docker\n\n\n# Configure the Docker storage back end to prepare and use our EBS block device.\n# https://docs.openshift.org/latest/install_config/install/host_preparation.html#configuring-docker-storage\n# Why xvdf? See:\n# http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\nusermod -aG docker $(whoami)\ncat \u003c\u003cEOF \u003e /etc/sysconfig/docker-storage-setup\nDEVS=/dev/xvdf\nVG=docker-vg\nEOF\ndocker-storage-setup\n\n# Restart docker and go to clean state as required by docker-storage-setup.\nsystemctl stop docker\nrm -rf /var/lib/docker/*\nsystemctl restart docker\n\n# Allow the ec2-user to sudo without a tty, which is required when we run post\n# install scripts on the server.\necho Defaults:ec2-user \\!requiretty \u003e\u003e /etc/sudoers\n",
                            "template": "#!/usr/bin/env bash\n\n# This script template is expected to be populated during the setup of a\n# OpenShift  node. It runs on host startup.\n\n# Log everything we do.\nset -x\nexec \u003e /var/log/user-data.log 2\u003e\u00261\n\nmkdir -p /etc/aws/\ncat \u003e /etc/aws/aws.conf \u003c\u003c- EOF\n[Global]\nZone = ${availability_zone}\nEOF\n\n# Create initial logs config.\ncat \u003e ./awslogs.conf \u003c\u003c- EOF\n[general]\nstate_file = /var/awslogs/state/agent-state\n\n[/var/log/messages]\nlog_stream_name = openshift-node-{instance_id}\nlog_group_name = /var/log/messages\nfile = /var/log/messages\ndatetime_format = %b %d %H:%M:%S\nbuffer_duration = 5000\ninitial_position = start_of_file\n\n[/var/log/user-data.log]\nlog_stream_name = openshift-node-{instance_id}\nlog_group_name = /var/log/user-data.log\nfile = /var/log/user-data.log\nEOF\n\n# Download and run the AWS logs agent.\ncurl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O\npython ./awslogs-agent-setup.py --non-interactive --region eu-west-1 -c ./awslogs.conf\n\n# Start the awslogs service, also start on reboot.\n# Note: Errors go to /var/log/awslogs.log\nservice awslogs start\nchkconfig awslogs on\n\n# OpenShift setup\n# See: https://docs.openshift.org/latest/install_config/install/host_preparation.html\n\n# Install packages required to setup OpenShift.\nyum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools kexec-tools sos psacct\n#yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion httpd-tools\nyum update -y\n\n# systemctl reboot\n\n# yum install atomic\n\n# Note: The step below is not in the official docs, I needed it to install\n# Docker. If anyone finds out why, I'd love to know.\n# See: https://forums.aws.amazon.com/thread.jspa?messageID=574126\nyum-config-manager --enable rhui-REGION-rhel-server-extras\n\n## Docker setup. Check the version with `docker version`, should be 1.12.\nyum install -y docker\n\n\n# Configure the Docker storage back end to prepare and use our EBS block device.\n# https://docs.openshift.org/latest/install_config/install/host_preparation.html#configuring-docker-storage\n# Why xvdf? See:\n# http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\nusermod -aG docker $(whoami)\ncat \u003c\u003cEOF \u003e /etc/sysconfig/docker-storage-setup\nDEVS=/dev/xvdf\nVG=docker-vg\nEOF\ndocker-storage-setup\n\n# Restart docker and go to clean state as required by docker-storage-setup.\nsystemctl stop docker\nrm -rf /var/lib/docker/*\nsystemctl restart docker\n\n# Allow the ec2-user to sudo without a tty, which is required when we run post\n# install scripts on the server.\necho Defaults:ec2-user \\!requiretty \u003e\u003e /etc/sudoers\n",
                            "vars.%": "1",
                            "vars.availability_zone": "eu-west-1a"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "local_file.inventory": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.inventory"
                    ],
                    "primary": {
                        "id": "fa88e3a7454669c69fcd00a03133ba05eb6e12b0",
                        "attributes": {
                            "content": "# OpenShift Inventory Template.\n# Note that when the infrastructure is generated by Terraform, this file is\n# expanded into './inventory.cfg', based on the rules in:\n#\n#   ./modules/openshift/08-inventory.tf\n\n# Create an OSEv3 group that contains the masters and nodes groups\n[OSEv3:children]\nmasters\nnodes\netcd\n\n# Set variables common for all OSEv3 hosts\n[OSEv3:vars]\n# SSH user, this user should allow ssh based auth without requiring a password\nansible_ssh_user=ec2-user\n\n# If ansible_ssh_user is not root, ansible_become must be set to true\nansible_become=true\n\n# Deploy OpenShift origin.\ndeployment_type=origin\n#openshift_deployment_type=origin\n#openshift_image_tag=\"v3.7.1\"\n#openshift_pkg_version=\"-3.7\"\n#containerized=false\n\n# logging\nopenshift_logging_install_logging=true\n\n# We need a wildcard DNS setup for our public access to services, fortunately\n# we can use the superb xip.io to get one for free.\nopenshift_public_hostname=34.241.4.117.xip.io\nopenshift_master_default_subdomain=34.241.4.117.xip.io\n\n# Use an htpasswd file as the indentity provider.\nopenshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]\n\n# disable check on package version\nopenshift_disable_check=package_version\n\n# Uncomment the line below to enable metrics for the cluster.\nopenshift_metrics_install_metrics=true\n\n# Use API keys rather than instance roles so that tenant containers don't get\n# Openshift's EC2/EBS permissions\nopenshift_cloudprovider_kind=aws\nopenshift_clusterid=Openshift\nopenshift_cloudprovider_aws_access_key=AKIAJMOIFW5N7PCM2OYQ\nopenshift_cloudprovider_aws_secret_key=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\n\n# Docker additional external insecure repository\nopenshift_docker_additional_registries=docker-CG.cgnet.nl \nopenshift_docker_insecure_registries=docker-CG.cgnet.nl \n\n# Upgrade Hooks\n#\n# Hooks are available to run custom tasks at various points during a cluster\n# upgrade. Each hook should point to a file with Ansible tasks defined. Suggest using\n# absolute paths, if not the path will be treated as relative to the file where the\n# hook is actually used.\n\n# Define an additional dnsmasq.conf file to deploy to /etc/dnsmasq.d/openshift-ansible.conf\n# This is useful for POC environments where DNS may not actually be available yet or to set\n# options like 'strict-order' to alter dnsmasq configuration.\nopenshift_node_dnsmasq_additional_config_file=/home/ec2-user/cg-dnsmasq.cfg\n\n# additional cors origins\nosm_custom_cors_origins=['sc.*','s3.*']\n\n# LDAP auth\n#openshift_master_identity_providers=[{'name': 'cg_ldap_provider','challenge': 'true','login': 'true','kind': 'LDAPPasswordIdentityProvider','attributes': {'id': ['dn'],'email': ['mail'],'name': ['cn'],'preferredUsername': ['uid']},'bindDN': '','bindPassword': '','ca': '','insecure': 'true','url': 'ldap://zd005.cgnet.nl:389/cn=Manager,dc=cgnet,dc=nl?uid'}]\n\n# Create the masters host group. Note that due do:\n#   https://github.com/dwmkerr/terraform-aws-openshift/issues/40\n# We cannot use the internal DNS names (such as master.openshift.local) as there\n# is a bug with the installer when using the AWS cloud provider.\n[masters]\nip-172-24-28-83.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-83.eu-west-1.compute.internal\n\n# host group for etcd\n[etcd]\nip-172-24-28-83.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-83.eu-west-1.compute.internal\n\n# host group for nodes, includes region info\n[nodes]\nip-172-24-28-83.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-83.eu-west-1.compute.internal openshift_node_labels=\"{'region': 'infra', 'zone': 'default'}\" openshift_schedulable=true\nip-172-24-28-250.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-250.eu-west-1.compute.internal openshift_node_labels=\"{'region': 'primary', 'zone': 'east'}\"\nip-172-24-28-201.eu-west-1.compute.internal openshift_hostname=ip-172-24-28-201.eu-west-1.compute.internal openshift_node_labels=\"{'region': 'primary', 'zone': 'west'}\"\n\n\n",
                            "filename": "/Users/r.konjer/dev/devsol/devops/cicd/openshift/terraform-aws-openshift/inventory.cfg",
                            "id": "fa88e3a7454669c69fcd00a03133ba05eb6e12b0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        }
    ]
}
